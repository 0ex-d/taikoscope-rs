# Reference guide: https://depot.dev/blog/rust-dockerfile-best-practices

# Run with Debian, libclang has issues with Alpine.
# Make sure to update rust-toolchain.toml when updating the base image,
# and vice versa.
FROM rust:1.87-bookworm AS base

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    libssl-dev \
    pkg-config \
    clang \
    llvm-19 \
    libclang-19-dev \
    cmake \
    && rm -rf /var/lib/apt/lists/*

RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    cargo install --locked sccache cargo-chef && \
    rm -rf /usr/local/cargo/registry /usr/local/cargo/git

ENV RUSTC_WRAPPER=sccache SCCACHE_DIR=/sccache \
    CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

FROM base AS planner

WORKDIR /app

COPY . .

RUN --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    cargo chef prepare --recipe-path recipe.json

FROM base AS builder

WORKDIR /app
COPY --from=planner /app/recipe.json recipe.json

# Add architecture as a build arg
ARG TARGETARCH

RUN --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    cargo chef cook --release --recipe-path recipe.json
COPY . .
RUN --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/local/cargo/git \
    if [ "$TARGETARCH" = "arm64" ]; then \
    echo "Building for arm64 with JEMALLOC_SYS_WITH_LG_PAGE=16"; \
    JEMALLOC_SYS_WITH_LG_PAGE=16 cargo build --profile release --bin api-server; \
    else \
    echo "Building for $TARGETARCH"; \
    cargo build --profile release --bin api-server; \
    fi
RUN strip target/release/api-server

FROM debian:bookworm-slim AS runtime

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=builder /app/target/release/api-server api-server

RUN chmod +x api-server && \
    groupadd -r taikoscope && \
    useradd -r -g taikoscope taikoscope

# Expose the HTTP port
EXPOSE 3000

USER taikoscope

ENTRYPOINT ["./api-server"]
